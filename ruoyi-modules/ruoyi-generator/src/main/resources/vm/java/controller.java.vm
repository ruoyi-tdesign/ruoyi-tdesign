package ${packageName}.controller;

import java.util.List;

import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.constraints.*;
import cn.dev33.satoken.annotation.SaCheckPermission;
import cn.dev33.satoken.annotation.SaMode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.Validated;
import org.dromara.common.idempotent.annotation.RepeatSubmit;
import org.dromara.common.log.annotation.Log;
import org.dromara.common.web.core.BaseController;
import org.dromara.common.core.domain.R;
import org.dromara.common.core.validate.AddGroup;
import org.dromara.common.core.validate.EditGroup;
import org.dromara.common.log.enums.BusinessType;
import org.dromara.common.excel.utils.ExcelUtil;
#if(!$isUseBO || !$isUseQuery || !$isUseVO)
import ${packageName}.domain.${ClassName};
#end
#if($isUseBO)
#set($bo="${ClassName}Bo")
#set($boObjName="bo")
import ${packageName}.domain.bo.${ClassName}Bo;
#else
#set($bo=$ClassName)
#set($boObjName="${className}")
#end
#if($isUseQuery)
#set($query="${ClassName}Query")
import ${packageName}.domain.query.${ClassName}Query;
#else
#set($query=$ClassName)
#end
#if($isUseVO)
#set($vo="${ClassName}Vo")
import ${packageName}.domain.vo.${ClassName}Vo;
#else
#set($vo=$ClassName)
#end
import ${packageName}.service.I${ClassName}Service;
#if($table.isCrud())
import org.dromara.common.mybatis.core.page.TableDataInfo;
#elseif($table.isTree())
#end

/**
 * ${functionName}
 *
 * @author ${author}
 * @date ${datetime}
 */
@Validated
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {

    @Autowired
    private I${ClassName}Service ${className}Service;
#if($isUseQueryMethod)

    /**
     * 查询${functionName}列表
     */
    @SaCheckPermission("${permissionPrefix}:list")
    @GetMapping("/list")
#if($table.isCrud())
    public TableDataInfo<${vo}> list(${query} query) {
        return ${className}Service.queryPageList(query);
    }
#elseif($table.isTree())
    public R<List<${vo}>> list(${query} query) {
        List<${vo}> list = ${className}Service.queryList(query);
        return R.ok(list);
    }
#end
#end
#if($isUseExportMethod)

    /**
     * 导出${functionName}列表
     */
    @SaCheckPermission("${permissionPrefix}:export")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(${query} query, HttpServletResponse response) {
        List<${vo}> list = ${className}Service.queryList(query);
        ExcelUtil.exportExcel(list, "${functionName}", ${vo}.class, response);
    }
#end
#if($isUseEditMethod || $isUseDetailMethod)

    /**
     * 获取${functionName}详细信息
     *
     * @param ${pkColumn.javaField} 主键
     */
    @SaCheckPermission(value = {"${permissionPrefix}:query", "${permissionPrefix}:edit"}, mode = SaMode.OR)
    @GetMapping("/{${pkColumn.javaField}}")
    public R<${vo}> getInfo(@NotNull(message = "主键不能为空") @PathVariable ${pkColumn.javaType} ${pkColumn.javaField}) {
        return R.ok(${className}Service.queryById(${pkColumn.javaField}));
    }
#end
#if($isUseAddMethod)

    /**
     * 新增${functionName}
     */
    @SaCheckPermission("${permissionPrefix}:add")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @RepeatSubmit()
    @PostMapping()
    public R<Void> add(@Validated(AddGroup.class) @RequestBody ${bo} $boObjName) {
        return toAjax(${className}Service.insertByBo($boObjName));
    }
#end
#if($isUseEditMethod)

    /**
     * 修改${functionName}
     */
    @SaCheckPermission("${permissionPrefix}:edit")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @RepeatSubmit()
    @PutMapping()
    public R<Void> edit(@Validated(EditGroup.class) @RequestBody ${bo} $boObjName) {
        return toAjax(${className}Service.updateByBo($boObjName));
    }
#end
#if($isUseRemoveMethod)

    /**
     * 删除${functionName}
     *
     * @param ${pkColumn.javaField}s 主键串
     */
    @SaCheckPermission("${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public R<Void> remove(@NotEmpty(message = "主键不能为空") @PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        return toAjax(${className}Service.deleteWithValidByIds(List.of(${pkColumn.javaField}s)));
    }
#end
}
